filter import_from_transit {
    bgp_large_community.add((OWNAS, 1, bgp_path.first));
    if net ~ OWNNETSETv6 then {
        reject; # 不收别人发来的自己网络的前缀
    }
    if (roa_check(public_roa_v6, net, bgp_path.last) = ROA_INVALID) then {
        # print "[public] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject; # 拒绝接收 ROA 错误的路由
    } else {
        accept;
    }
};

filter export_to_transit {
    if source ~ [RTS_STATIC, RTS_BGP] then {
        if net ~ OWNNETSETv6 then {
            accept;
        } else {
            reject;
        }
    } else {
        reject;
    }
};

filter import_from_peer {
    bgp_large_community.add((OWNAS, 2, bgp_path.first));
    if net ~ OWNNETSETv6 then {
        reject; # 不收别人发来的自己网络的前缀
    }
    if (roa_check(public_roa_v6, net, bgp_path.last) = ROA_INVALID) then {
        # print "[public] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject; # 拒绝接收 ROA 错误的路由
    } else {
        accept;
    }
};

filter export_to_peer {
    if source ~ [RTS_STATIC, RTS_BGP] then {
        if net ~ OWNNETSETv6 then {
            accept;
        } else {
            reject;
        }
    } else {
        reject;
    }
};

filter import_from_internal {
    accept;
}

filter export_to_internal {
    if source ~ [RTS_STATIC, RTS_BGP] then {
        accept;
    } else {
        reject;
    }
}
