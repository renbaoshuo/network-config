# BGP Large Community: (AA: u32, BB: u32, NN: u32)
define BGPCOMM_AA = 141776;

define BGPCOMM_BB_TYPE              = 4200000001;
define BGPCOMM_BB_PEER              = 4200000002;
define BGPCOMM_BB_ROUTER            = 4200000010;
define BGPCOMM_BB_AREA              = 4200000011;
define BGPCOMM_BB_COUNTRY           = 4200000012;
define BGPCOMM_BB_EXPORT_POLICY     = 141776;
define BGPCOMM_BB_NO_EXPORT_POLICY  = 0;

define BGPCOMM_NN_TYPE_BSNET =  1;
define BGPCOMM_NN_TYPE_PEERING = 10;
define BGPCOMM_NN_TYPE_TRANSIT = 11;
define BGPCOMM_NN_EXPORT_POLICY_ANY            = 141776;
define BGPCOMM_NN_EXPORT_POLICY_ROUTER_PREFIX  = 4210000000;
define BGPCOMM_NN_EXPORT_POLICY_AREA_PREFIX    = 4211000000;
define BGPCOMM_NN_EXPORT_POLICY_COUNTRY_PREFIX = 4212000000;

# bgp_add_local_communities()
# community to be added to imported routes on this router
function bgp_add_local_communities() {
    bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_AREA, LOCAL_CODE_AREA));
    bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_ROUTER, LOCAL_ROUTER_NUM));
    bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_COUNTRY, LOCAL_CODE_COUNTRY));
    return true;
}

# bgp_import(peer_asn: int, import_type: string, check_path_first: bool)
# import filter for BGP protocol
# Import types
#  - default: receive default route only
#  - transit: endpoint is transit
#  - peering: endpoint is peering
#  - core: iBGP session with core routers
#  - edge: iBGP session with edge routers who don't have OSPF and attribute allocated
function bgp_import(int peer_asn; string import_type; bool check_path_first) {
    if !(import_type = "transit" || import_type = "peering" || import_type = "core" || import_type = "edge" || import_type = "default") then return false;

    if is_default() then {
        if import_type != "default" then return false;
    }

    # 保留地址, 长度大于 100 的 as path, 前缀长度不达标的就不要了
    if is_bogon_prefix() || (bgp_path.len > 100) || net_len_too_long() then return false;
    if import_type != "core" && import_type != "edge" then {
        if bgp_path.len = 0 then bgp_path.prepend(peer_asn); # no empty as path
        if check_path_first && bgp_path.first != peer_asn then return false;
        if is_in_bsnet() then return false; # 不从别人那里收本网前缀
        if !check_roa() then return false;  # ROA 检查
        bgp_large_community.delete([(BGPCOMM_AA, *, *)]);
        bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_PEER, peer_asn));
        bgp_add_local_communities();
    }

    bgp_local_pref = 1;
    if import_type = "transit" then {
        bgp_local_pref = 1999;
        bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_TYPE, BGPCOMM_NN_TYPE_TRANSIT));
    } else if import_type = "peering" then {
        bgp_local_pref = 2800; # same as "same country peering" below
        bgp_large_community.add((BGPCOMM_AA, BGPCOMM_BB_TYPE, BGPCOMM_NN_TYPE_PEERING));
    } else if import_type = "core" then {
        if (BGPCOMM_AA, BGPCOMM_BB_TYPE, BGPCOMM_NN_TYPE_PEERING) ~ bgp_large_community then {
            bgp_local_pref = 2100;
            if (BGPCOMM_AA, BGPCOMM_BB_COUNTRY, LOCAL_CODE_COUNTRY) ~ bgp_large_community then {  # same country
                bgp_local_pref = 2800;
            } else if (BGPCOMM_AA, BGPCOMM_BB_AREA, LOCAL_CODE_AREA) ~ bgp_large_community then { # same area
                bgp_local_pref = 2500;
            }
        } else if(BGPCOMM_AA, BGPCOMM_BB_TYPE, BGPCOMM_NN_TYPE_TRANSIT) ~ bgp_large_community then {
            bgp_local_pref = 1100;
            if (BGPCOMM_AA, BGPCOMM_BB_COUNTRY, LOCAL_CODE_COUNTRY) ~ bgp_large_community then {  # same country
                bgp_local_pref = 1800;
            } else if (BGPCOMM_AA, BGPCOMM_BB_AREA, LOCAL_CODE_AREA) ~ bgp_large_community then { # same area
                bgp_local_pref = 1500;
            }
        }
    } else if import_type = "edge" then {
        bgp_local_pref = 3999;
        bgp_add_local_communities();
    }

    return true;
}

# bgp_export(peer_asn: int, export_type: string)
# export filter for BGP protocol
# Export types
#  - default: only default routes
#  - full: full table
#  - core: iBGP session with core routers
#  - transit: endpoint is transit
#  - peering: endpoint is peering
function bgp_export(int peer_asn; string export_type)
lclist specific_export_policies;
{
    if !(export_type = "default" || export_type = "full" || export_type = "core" || export_type = "transit" || export_type = "peering") then return false;

    if is_bogon_prefix() || net_len_too_long() then return false;
    # 只有 default 模式才导出 default
    if is_default() then { 
        if export_type = "default" then return true;
        return false;
    }

    if filter(bgp_large_community, [(BGPCOMM_AA, *, *)]).len = 0 then return false;
    if export_type = "full" then {
        # seems nothing to do
    } else if export_type = "transit" then {
        if !is_in_bsnet() then return false;
        # transit 默认只导出当前路由进来的，或按照导出规则
        specific_export_policies = filter(bgp_large_community, [(BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, *)]);
        if specific_export_policies.len = 0 then {
            # 如果不是从当前路由导入的
            if (BGPCOMM_AA, BGPCOMM_BB_ROUTER, LOCAL_ROUTER_NUM) !~ bgp_large_community then return false;
        } else {
            # 有宣告策略，但不符合要求
            if filter(specific_export_policies, [
                (BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, BGPCOMM_NN_EXPORT_POLICY_ANY),
                (BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, BGPCOMM_NN_EXPORT_POLICY_ROUTER_PREFIX + LOCAL_ROUTER_NUM),
                (BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, BGPCOMM_NN_EXPORT_POLICY_AREA_PREFIX + LOCAL_CODE_AREA),
                (BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, BGPCOMM_NN_EXPORT_POLICY_COUNTRY_PREFIX + LOCAL_CODE_COUNTRY)
            ]).len = 0 then return false;
        }
    } else if export_type = "peering" then {
        if !is_in_bsnet() then return false;
    }

    if export_type = "transit" || export_type = "peering" then {
        bgp_large_community.delete([(BGPCOMM_AA, *, *)]);
    } if export_type != "core" then { # 除了 core 的导出都扬掉导出策略
        bgp_large_community.delete([(BGPCOMM_AA, BGPCOMM_BB_EXPORT_POLICY, *)]);
    }
    
    return true;
}
