function is_default() {
    return net ~ [0.0.0.0/0, ::/0];
}

function net_len_too_long() {
    case net.type {
        NET_IP4: return net.len > 24;
        NET_IP6: return net.len > 48;
        else: print "net_len_too_long: unexpected net.type ", net.type, " ", net; return false;
    }
}

function is_bogon_prefix() {
    case net.type {
        ############## ipv4 ##############
        NET_IP4: return net ~ [
            0.0.0.0/8+,         # RFC 1122 'this' network
            10.0.0.0/8+,        # RFC 1918 private space
            100.64.0.0/10+,     # RFC 6598 Carrier grade nat space
            127.0.0.0/8+,       # RFC 1122 localhost
            169.254.0.0/16+,    # RFC 3927 link local
            172.16.0.0/12+,     # RFC 1918 private space 
            192.0.2.0/24+,      # RFC 5737 TEST-NET-1
            192.88.99.0/24+,    # RFC 7526 6to4 anycast relay
            192.168.0.0/16+,    # RFC 1918 private space
            198.18.0.0/15+,     # RFC 2544 benchmarking
            198.51.100.0/24+,   # RFC 5737 TEST-NET-2
            203.0.113.0/24+,    # RFC 5737 TEST-NET-3
            224.0.0.0/4+,       # multicast
            240.0.0.0/4+        # reserved
        ];
        ############## ipv6 ##############
        NET_IP6: return net ~ [
            ::/8+,              # RFC 4291 IPv4-compatible, loopback, et al 
            0100::/64+,         # RFC 6666 Discard-Only
            2001:2::/48+,       # RFC 5180 BMWG
            2001:10::/28+,      # RFC 4843 ORCHID
            2001:db8::/32+,     # RFC 3849 documentation
            2002::/16+,         # RFC 7526 6to4 anycast relay
            3ffe::/16+,         # RFC 3701 old 6bone
            fc00::/7+,          # RFC 4193 unique local unicast
            fe80::/10+,         # RFC 4291 link local unicast
            fec0::/10+,         # RFC 3879 old site local unicast
            ff00::/8+           # RFC 4291 multicast
        ];
        else: print "is_bogon_prefix: unexpected net.type ", net.type, " ", net; return false;
    }
}

define BOGON_ASN = [
    0,
    23456,
    64496..64511,
    64512..65534,
    65535,
    65536..65551,
    65552..131071,
    4200000000..4294967294,
    4294967295
];

function is_bogon_asn() {
    return bgp_path ~ BOGON_ASN;
}

function check_source() {
    return source ~ [RTS_STATIC, RTS_BGP];
}

function check_roa() {
    case net.type {
        NET_IP4:
            if roa_check(roa_table_v4, net, bgp_path.last) = ROA_INVALID then {
                print "check_roa_v4: ROA check failed for ", net, " ASN ", bgp_path.last;
                return false;
            }
            return true;
        NET_IP6:
            if roa_check(roa_table_v6, net, bgp_path.last) = ROA_INVALID then {
                print "check_roa_v6: ROA check failed for ", net, " ASN ", bgp_path.last;
                return false;
            }
            return true;
        else: print "check_roa: unexpected net.type ", net.type, " ", net; return false;
    }
}

include "filter/*.conf";
