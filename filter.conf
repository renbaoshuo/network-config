define OWNNETSETv6 = [
    2406:840:e080::/44{44,48},
    2a0e:b107:13a0::/44{44,48},
    2a0e:b107:11c0::/44{44,48},
    2a0d:2584::/32{32,48}
];

function net_len_too_long() {
    case net.type {
        NET_IP4: return net.len > 24;     # IPv4 CIDR 大于 /24 为太长
        NET_IP6: return net.len > 48;     # IPv6 CIDR 大于 /48 为太长
        else: print "check_net_len: unexpected net.type ", net.type, " ", net; return false;
    }
}

function check_source() {
    return source ~ [RTS_STATIC, RTS_BGP];
}

function is_self_net_v6() {
    return net ~ OWNNETSETv6;
}

function check_roa() {
    if (roa_check(roa_table_v6, net, bgp_path.last) = ROA_INVALID) then {
        print "[internet] ROA check failed for ", net, " ASN ", bgp_path.last;
        return false;
    }
    return true;
}

function import_from_transit() {
    bgp_large_community.add((OWNAS, 1, bgp_path.first));
    if is_self_net_v6() then reject;      # 别人发来的自己网络的前缀不收
    if net_len_too_long() then reject;    # 前缀太长不收
    if !check_roa() then reject;          # ROA 验证失败的不收
    accept;
}

function export_to_transit() {
    if net_len_too_long() then reject;
    if !check_source() then reject;
    if !is_self_net_v6() then reject;
    accept;
}

function import_from_peer() {
    bgp_large_community.add((OWNAS, 2, bgp_path.first));
    if is_self_net_v6() then reject;      # 别人发来的自己网络的前缀不收
    if net_len_too_long() then reject;    # 前缀太长不收
    if !check_roa() then reject;          # ROA 验证失败的不收
    accept;
}

function export_to_peer() {
    if net_len_too_long() then reject;
    if !check_source() then reject;
    if !is_self_net_v6() then reject;
    accept;
}

function import_from_internal() {
    accept;
}

function export_to_internal() {
    if check_source() then accept;
    reject;
}
